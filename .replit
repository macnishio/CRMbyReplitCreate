modules = ["nodejs-20", "python-3.11"]

[nix]
channel = "stable-24_05"

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Run Flask App"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Check Migrations"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Apply Migrations"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Run Flask Migrations"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Database Backup"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Check Pending Migrations"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Create New Migration"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Remove Old Migrations"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Apply Migration"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Check Migration Status"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Create Migration"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Clean Migration"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Init Migration"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Clean Migrations"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Create and Apply Migration"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Init Database"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Initialize DB"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Flask App"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Initialize Database"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Flask Server"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Reset DB"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "DB Init"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Reset And Init DB"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "DB Setup"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Clean DB Init"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Fresh DB Setup"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "DB Reset"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "DB Reset And Init"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "DB Init and Run"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "CRM App"

[[workflows.workflow]]
name = "Run Flask App"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python app.py"
waitForPort = 5000

[[workflows.workflow]]
name = "Check Migrations"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "ls -l migrations/versions"

[[workflows.workflow]]
name = "Apply Migrations"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "flask db upgrade"

[[workflows.workflow]]
name = "Run Flask Migrations"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "flask db migrate -m 'Add Task model' && flask db upgrade"

[[workflows.workflow]]
name = "Database Backup"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

    current_date=$(date +%Y%m%d)
    pg_dump $DATABASE_URL > crm_backup_$current_date.sql
    echo \"Database backup created: crm_backup_$current_date.sql\"
    """

[[workflows.workflow]]
name = "Check Pending Migrations"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "flask db check"

[[workflows.workflow]]
name = "Create New Migration"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "flask db migrate -m 'Change status to stage in Opportunity model'"

[[workflows.workflow]]
name = "Remove Old Migrations"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "find migrations/versions -type f -name 'e8587aed691b_add_task_model.py' -delete"

[[workflows.workflow]]
name = "Apply Migration"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "flask db upgrade"

[[workflows.workflow]]
name = "Check Migration Status"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "flask db current"

[[workflows.workflow]]
name = "Create Migration"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "flask db migrate -m 'Add UserSettings model' && flask db upgrade"

[[workflows.workflow]]
name = "Clean Migration"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "rm -rf migrations/versions/*"

[[workflows.workflow]]
name = "Init Migration"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "flask db init && flask db migrate -m 'Initial migration' && flask db upgrade"

[[workflows.workflow]]
name = "Clean Migrations"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "rm -rf migrations && flask db init"

[[workflows.workflow]]
name = "Create and Apply Migration"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "flask db migrate -m 'Add UserSettings model' && flask db upgrade"

[[workflows.workflow]]
name = "Init Database"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "rm -rf migrations && flask db init && flask db migrate -m 'Initial migration with all models' && flask db upgrade"

[[workflows.workflow]]
name = "Initialize DB"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

    rm -rf migrations &&     flask db init &&     flask db migrate -m 'Initial migration with all models' &&     flask db upgrade &&     python app.py
    """
waitForPort = 5000

[[workflows.workflow]]
name = "Flask App"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python app.py"
waitForPort = 5000

[[workflows.workflow]]
name = "Initialize Database"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

    rm -rf migrations &&     flask db init &&     flask db migrate -m 'Initial migration with all models including Task and UserSettings' &&     flask db upgrade &&     python app.py
    """
waitForPort = 5000

[[workflows.workflow]]
name = "Flask Server"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python3 app.py"
waitForPort = 5000

[[workflows.workflow]]
name = "Reset DB"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

rm -rf migrations && flask db init && flask db migrate -m 'Initial migration with all models including Task and UserSettings' && flask db upgrade"""

[[workflows.workflow]]
name = "DB Init"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

    export FLASK_APP=app.py &&
    export FLASK_ENV=development &&
    python3 -c \"
from app import create_app
from extensions import db
from models import User, Task, Lead, UserSettings
from datetime import datetime, timedelta

app = create_app()
with app.app_context():
    db.drop_all()
    db.create_all()
    
    # Create admin user
    admin = User(username='admin', email='admin@example.com')
    admin.set_password('admin')
    db.session.add(admin)
    db.session.flush()
    
    # Create user settings
    settings = UserSettings(
        user_id=admin.id,
        mail_server='smtp.example.com',
        mail_port=587,
        mail_use_tls=True,
        mail_username='test@example.com',
        mail_password='password123'
    )
    db.session.add(settings)
    db.session.flush()
    
    # Create sample lead
    lead = Lead(
        name='Test Lead',
        email='lead@example.com',
        status='New',
        score=0.0,
        user_id=admin.id
    )
    db.session.add(lead)
    db.session.flush()
    
    # Create sample tasks with different statuses
    tasks = [
        Task(
            title='提案内容を確認し、営業組織の現状と課題を把握する。',
            description='営業戦略の改善点を特定するため、現状分析を行う',
            due_date=datetime.now() + timedelta(days=7),
            status='New',
            completed=False,
            user_id=admin.id,
            lead_id=lead.id
        ),
        Task(
            title='営業改革の必要性とメリットを判断し、コンサルティングサービスの利用有無を検討する。',
            description='コスト対効果を含めた総合的な判断を行う',
            due_date=datetime.now() + timedelta(days=7),
            status='In Progress',
            completed=False,
            user_id=admin.id,
            lead_id=lead.id
        )
    ]
    db.session.add_all(tasks)
    db.session.commit()
    print('Database successfully initialized with sample data')
\"
    """

[[workflows.workflow]]
name = "Reset And Init DB"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

    export FLASK_APP=app.py &&     rm -rf migrations &&     flask db init &&     flask db migrate -m \"Initial migration with all models and tables\" &&     flask db upgrade &&     python app.py
    """
waitForPort = 5000

[[workflows.workflow]]
name = "DB Setup"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

    export FLASK_APP=app.py &&     export FLASK_ENV=development &&     rm -rf migrations &&     flask db init &&     flask db migrate -m \"Initial setup with all models\" &&     flask db upgrade
    """

[[workflows.workflow]]
name = "Clean DB Init"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

    export FLASK_APP=app.py &&
    export FLASK_ENV=development &&
    flask db downgrade base &&
    rm -rf migrations &&
    flask db init &&
    flask db migrate -m \"Initial migration with all models and tables\" &&
    flask db upgrade &&
    python app.py
    """
waitForPort = 5000

[[workflows.workflow]]
name = "Fresh DB Setup"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

    export FLASK_APP=app.py &&
    export FLASK_ENV=development &&
    python3 -c \"
from app import create_app
from extensions import db
app = create_app()
with app.app_context():
    db.drop_all()
    db.create_all()
    print('Database tables recreated successfully')
\" &&
    rm -rf migrations &&
    flask db init &&
    flask db migrate -m 'Initial setup with all models and tables' &&
    flask db upgrade
    """

[[workflows.workflow]]
name = "DB Reset"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

    export FLASK_APP=app.py &&
    export FLASK_ENV=development &&
    python3 -c \"
from app import create_app
from extensions import db
from models import User, UserSettings, Task, Lead
import os
from datetime import datetime, timedelta

app = create_app()
with app.app_context():
    db.drop_all()
    db.create_all()
    
    # Create admin user
    admin = User(username='admin', email='admin@example.com')
    admin.set_password('admin')
    db.session.add(admin)
    db.session.flush()
    
    # Create lead for tasks
    lead = Lead(
        name='Test Lead',
        email='test@example.com',
        status='New',
        score=0.0,
        user_id=admin.id
    )
    db.session.add(lead)
    db.session.flush()

    # Create sample tasks
    tasks = [
        Task(
            title='提案内容を確認し、営業組織の現状と課題を把握する。',
            description='営業戦略の改善点を特定するため、現状分析を行う',
            due_date=datetime.now() + timedelta(days=7),
            status='New',
            completed=False,
            user_id=admin.id,
            lead_id=lead.id
        ),
        Task(
            title='営業改革の必要性とメリットを判断し、コンサルティングサービスの利用有無を検討する。',
            description='コスト対効果を含めた総合的な判断を行う',
            due_date=datetime.now() + timedelta(days=7),
            status='In Progress',
            completed=False,
            user_id=admin.id,
            lead_id=lead.id
        )
    ]
    db.session.add_all(tasks)

    # Create user settings
    settings = UserSettings(
        user_id=admin.id,
        mail_server=os.environ['MAIL_SERVER'],
        mail_port=int(os.environ['MAIL_PORT']),
        mail_use_tls=os.environ['MAIL_USE_TLS'].lower() == 'true',
        mail_username=os.environ['MAIL_USERNAME'],
        mail_password=os.environ['MAIL_PASSWORD'],
        claude_api_key=os.environ.get('CLAUDE_API_KEY'),
        clearbit_api_key=os.environ.get('CLEARBIT_API_KEY')
    )
    db.session.add(settings)
    db.session.commit()
    print('Database tables recreated with sample data')
\" &&
    rm -rf migrations &&
    flask db init &&
    flask db migrate -m 'Initial migration with all models' &&
    flask db upgrade &&
    python3 app.py
    """
waitForPort = 5000

[[workflows.workflow]]
name = "DB Reset And Init"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

    export FLASK_APP=app.py &&
    export FLASK_ENV=development &&
    python3 -c \"
from app import create_app
from extensions import db
from models import User, Task, Lead, UserSettings
import os
from datetime import datetime, timedelta

app = create_app()
with app.app_context():
    db.drop_all()
    db.create_all()
    
    # Create admin user
    admin = User(username='admin', email='admin@example.com')
    admin.set_password('admin')
    db.session.add(admin)
    db.session.flush()
    
    # Create user settings
    settings = UserSettings(
        user_id=admin.id,
        mail_server='smtp.example.com',
        mail_port=587,
        mail_use_tls=True,
        mail_username='test@example.com',
        mail_password='password123'
    )
    db.session.add(settings)
    
    # Create a test lead
    lead = Lead(
        name='Test Lead',
        email='lead@example.com',
        status='New',
        score=0.0,
        user_id=admin.id
    )
    db.session.add(lead)
    db.session.flush()
    
    # Create sample tasks
    tasks = [
        Task(
            title='提案内容を確認し、営業組織の現状と課題を把握する。',
            description='営業戦略の改善点を特定するため、現状分析を行う',
            due_date=datetime.now() + timedelta(days=7),
            status='New',
            completed=False,
            user_id=admin.id,
            lead_id=lead.id
        ),
        Task(
            title='営業改革の必要性とメリットを判断し、コンサルティングサービスの利用有無を検討する。',
            description='コスト対効果を含めた総合的な判断を行う',
            due_date=datetime.now() + timedelta(days=7),
            status='In Progress',
            completed=False,
            user_id=admin.id,
            lead_id=lead.id
        ),
        Task(
            title='参加申し込みの手続きをする',
            description='必要な情報を入力し、期限内に申し込みを完了する',
            due_date=datetime.now() + timedelta(days=7),
            status='Completed',
            completed=True,
            user_id=admin.id,
            lead_id=lead.id
        )
    ]
    db.session.add_all(tasks)
    db.session.commit()
    
    print('Database tables recreated successfully with sample data')
\" &&
    python3 app.py
    """
waitForPort = 5000

[[workflows.workflow]]
name = "DB Init and Run"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

    export FLASK_APP=app.py &&
    export FLASK_ENV=development &&
    python3 -c \"
from app import create_app
from extensions import db
from models import User, Task, Lead, UserSettings
from datetime import datetime, timedelta

app = create_app()
with app.app_context():
    db.drop_all()
    db.create_all()
    
    # Create admin user
    admin = User(username='admin', email='admin@example.com')
    admin.set_password('admin')
    db.session.add(admin)
    db.session.flush()
    
    # Create user settings
    settings = UserSettings(
        user_id=admin.id,
        mail_server='smtp.example.com',
        mail_port=587,
        mail_use_tls=True,
        mail_username='test@example.com',
        mail_password='password123'
    )
    db.session.add(settings)
    db.session.flush()
    
    # Create sample lead
    lead = Lead(
        name='Test Lead',
        email='lead@example.com',
        status='New',
        score=0.0,
        user_id=admin.id
    )
    db.session.add(lead)
    db.session.flush()
    
    # Create sample tasks with different statuses
    tasks = [
        Task(
            title='提案内容を確認し、営業組織の現状と課題を把握する。',
            description='営業戦略の改善点を特定するため、現状分析を行う',
            due_date=datetime.now() + timedelta(days=7),
            status='New',
            completed=False,
            user_id=admin.id,
            lead_id=lead.id
        ),
        Task(
            title='営業改革の必要性とメリットを判断し、コンサルティングサービスの利用有無を検討する。',
            description='コスト対効果を含めた総合的な判断を行う',
            due_date=datetime.now() + timedelta(days=7),
            status='In Progress',
            completed=False,
            user_id=admin.id,
            lead_id=lead.id
        ),
        Task(
            title='参加申し込みの手続きをする',
            description='必要な情報を入力し、期限内に申し込みを完了する',
            due_date=datetime.now() + timedelta(days=7),
            status='Completed',
            completed=True,
            user_id=admin.id,
            lead_id=lead.id
        )
    ]
    db.session.add_all(tasks)
    db.session.commit()
    print('Database successfully initialized with sample data')
\" &&
    python3 app.py
    """
waitForPort = 5000

[[workflows.workflow]]
name = "CRM App"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python3 db_init.py && python3 app.py"
waitForPort = 5000

[deployment]
run = ["sh", "-c", "python app.py"]

[[ports]]
localPort = 5000
externalPort = 80
