import json
import requests
import traceback
import logging
import re
import html
from datetime import datetime
from zoneinfo import ZoneInfo
from flask import current_app
from anthropic import Anthropic
from flask_login import current_user

# 現在の日時を日本時間で取得
jst_datetime = datetime.now(ZoneInfo("Asia/Tokyo"))
# 日付をフォーマット
formatted_date = jst_datetime.strftime("%Y-%m-%d")

def clean_ai_response(response):
    """AIの応答から余分なマークアップを除去し、HTMLを保持する関数"""
    if isinstance(response, str):
        match = re.search(r"\[TextBlock\(text='(.*?)', type='text'\)]", response, re.DOTALL)
        content = match.group(1) if match else response
        content = html.unescape(content)
        content = '<p class="ai-advice-paragraph">' + content.replace('\n\n', '</p><p class="ai-advice-paragraph">').replace('\n', '<br>') + '</p>'
        content = re.sub(r'<p class="ai-advice-paragraph">(\s*-\s*.+?)</p>', r'<ul class="ai-advice-list"><li>\1</li></ul>', content)
        content = re.sub(r'<br>(\s*-\s*)', r'</li><li>', content)
        content = re.sub(r'<p class="ai-advice-paragraph">(\d+\.\s+.+?)</p>', r'<h3 class="ai-advice-heading">\1</h3>', content)
        return f'<div class="ai-advice-content">{content}</div>'
    return response

def analyze_email(subject, content, user, ai_model='claude-3-haiku'):
    if ai_model == 'claude-3-haiku':
        return analyze_email_haiku(subject, content, user)
    elif ai_model == 'claude-3-sonnet':
        return analyze_email_sonnet(subject, content, user)
    else:
        raise ValueError(f"Unknown AI model: {ai_model}")
def analyze_email_haiku(subject, content, user):
    try:
        if not user:
            raise ValueError("User is not provided")
        if not user.claude_api_key:
            raise ValueError("Claude API key is not set for the user")
        client = Anthropic(api_key=user.claude_api_key)

        system_message = """
        You are an AI assistant that analyzes emails and provides suggestions for opportunities, schedules, and tasks.
        Be concise and direct in your responses.
        """

        if subject == "AIアドバイス":
            prompt = f"""
            今は日本時間の{formatted_date}です。以下の情報を分析し、ビジネス改善のための簡潔なアドバイスを提供してください。回答は日本語で、要点を絞って提供してください。

            {content}

            1. 重要案件の優先順位
            2. スケジュール最適化
            3. タスク管理の改善
            4. パフォーマンス向上策

            回答は箇条書きで、各項目2-3文程度にまとめてください。
            最後の部分に日本語で２００文字以内でまとめてください。
            """
        else:
            prompt = f"""
            今は日本時間の{formatted_date}です。以下のメールを分析し、機会、スケジュール、タスクを簡潔にJSON形式で提案してください。

            Subject: {subject}
            Content: {content}

            - 具体的な日時は「YYYY-MM-DD HH:MM」形式か「不明」と記載
            - 推測は避け、メールに明示されている情報のみを使用

            フォーマット:
            {{
              "Opportunities": ["送信元名:機会1", "送信元名:機会2"],
              "Schedules": [{{
                "Description": "送信元名:説明",
                "Start Time": "YYYY-MM-DD HH:MM" または "不明",
                "End Time": "YYYY-MM-DD HH:MM" または "不明"
              }}],
              "Tasks": [{{
                "Description": "送信元名:説明",
                "Due Date": "YYYY-MM-DD" または "不明"
              }}]
            }}
            """

        message = client.messages.create(
            model="claude-3-haiku-20240307",
            max_tokens=4000,
            temperature=0.7,
            system=system_message,
            messages=[{"role": "user", "content": prompt}]
        )

        if message.content:
            raw_response = message.content[0].text
            cleaned_response = clean_ai_response(raw_response)
            return cleaned_response
        else:
            raise ValueError("No content in Anthropic API response")

    except Exception as e:
        current_app.logger.error(f"Error in analyze_email_haiku: {str(e)}")
        return f"エラー: リクエストの処理中に予期しない問題が発生しました。管理者に連絡してください。"

def analyze_email_sonnet(subject, content, user):
    try:
        if not user:
            raise ValueError("User is not provided")
        if not user.claude_api_key:
            raise ValueError("Claude API key is not set for the user")
        client = Anthropic(api_key=user.claude_api_key)
        system_message = """
        You are an AI assistant that analyzes emails and provides detailed suggestions for opportunities, schedules, and tasks.
        Provide comprehensive and detailed responses.
        """

        if subject == "AIアドバイス":
            prompt = f"""
            今は日本時間の{formatted_date}です。以下の情報を分析し、ビジネス改善のための総合的なアドバイスを提供してください。回答は日本語でお願いします。
            {content}
            上記の情報を元に、以下の点を考慮した詳細なアドバイスを提供してください：
            1. 重要な案件（Opportunities）の優先順位付けと対応戦略
            2. スケジュール（Schedules）の最適化と時間管理の改善点
            3. タスク（Tasks）の効率的な実行方法と期限管理
            4. 全体的なビジネスパフォーマンス向上のための具体的な提案
            アドバイスは実用的で、各項目について詳細な説明を提供してください。
            最後の部分に日本語で２００文字以内でまとめてください。
            """
        else:
            prompt = f"""
            今は日本時間の{formatted_date}です。回答はすべて日本語でお願いします。以下のメールを分析し、機会、スケジュール、タスクの詳細な提案をしてください。
            - メール内で明示的に言及されている場合のみ、具体的な日付や時間（YYYY-MM-DD HH:MM形式）を含めてください。
            - 具体的な日時が明示されていない場合は、「不明」と記載してください。
            - 以下のJSON形式で分析結果を提供してください。
            Subject: {subject}
            Content: {content}
            フォーマット:
            {{
              "Opportunities": [
                "送信元名:機会1の詳細な説明",
                "送信元名:機会2の詳細な説明"
              ],
              "Schedules": [
                {{
                  "Description": "送信元名:スケジュール1の詳細な説明",
                  "Start Time": "YYYY-MM-DD HH:MM" または "不明",
                  "End Time": "YYYY-MM-DD HH:MM" または "不明"
                }}
              ],
              "Tasks": [
                {{
                  "Description": "送信元名:タスク1の詳細な説明",
                  "Due Date": "YYYY-MM-DD" または "不明"
                }}
              ]
            }}
            """

        message = client.messages.create(
            model="claude-3-sonnet-20240620",
            max_tokens=8192,
            temperature=1.0,
            system=system_message,
            messages=[{"role": "user", "content": prompt}]
        )

        if message.content:
            raw_response = message.content[0].text
            cleaned_response = clean_ai_response(raw_response)
            return cleaned_response
        else:
            raise ValueError("No content in Anthropic API response")

    except Exception as e:
        current_app.logger.error(f"Error in analyze_email_sonnet: {str(e)}")
        return f"エラー: リクエストの処理中に予期しない問題が発生しました。管理者に連絡してください。"

def parse_ai_response(response):
    """AIの応答からデータを解析"""
    cleaned_response = html.unescape(re.sub(r'<.*?>', '', response))
    cleaned_response = cleaned_response.strip()

    try:
        # JSONとしてパースを試みる
        data = json.loads(cleaned_response)
        opportunities = data.get('Opportunities', [])
        schedules = data.get('Schedules', [])
        tasks = data.get('Tasks', [])

        global_start_time, global_end_time = extract_global_times(schedules)

        return opportunities, schedules, tasks, global_start_time, global_end_time

    except json.JSONDecodeError:
        current_app.logger.warning("Failed to parse response as JSON. Attempting to extract data from text.")
        current_app.logger.debug(f"Raw response: {cleaned_response}")

        # テキストからデータを抽出
        opportunities = extract_data(cleaned_response, 'Opportunities')
        schedules = extract_data(cleaned_response, 'Schedules')
        tasks = extract_data(cleaned_response, 'Tasks')

        global_start_time, global_end_time = extract_global_times(schedules)

        current_app.logger.info(f"Extracted data: Opportunities: {len(opportunities)}, Schedules: {len(schedules)}, Tasks: {len(tasks)}")

        return opportunities, schedules, tasks, global_start_time, global_end_time

def extract_data(text, key):
    """テキストから特定のキーに関連するデータを抽出する"""
    pattern = rf'{key}:\s*(.*?)(?=\n\n|\Z)'
    matches = re.findall(pattern, text, re.DOTALL)
    if matches:
        items = [item.strip() for item in matches[0].split('\n') if item.strip()]
        return items
    return []

def extract_global_times(schedules):
    """スケジュールから全体の開始時間と終了時間を抽出する"""
    global_start_time = None
    global_end_time = None

    for sched in schedules:
        if isinstance(sched, dict):
            start_time = sched.get('Start Time')
            end_time = sched.get('End Time')
        else:
            # スケジュールが文字列の場合、時間情報を抽出
            time_match = re.search(r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2})', sched)
            if time_match:
                start_time = end_time = time_match.group(1)
            else:
                continue

        if start_time and start_time != '不明':
            if global_start_time is None or start_time < global_start_time:
                global_start_time = start_time
        if end_time and end_time != '不明':
            if global_end_time is None or end_time > global_end_time:
                global_end_time = end_time

    return global_start_time, global_end_time