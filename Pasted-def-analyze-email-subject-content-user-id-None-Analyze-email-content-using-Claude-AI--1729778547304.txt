def analyze_email(subject, content, user_id=None):
    """Analyze email content using Claude AI"""
    try:
        user_settings = UserSettings.query.filter_by(user_id=user_id if user_id else current_user.id).first()
        if not user_settings or not user_settings.claude_api_key:
            return '<p class="error-message">AI分析を実行するにはAPIキーの設定が必要です。</p>'

        client = Anthropic(api_key=user_settings.claude_api_key)

        prompt = f"""以下のメールを分析し、機会、スケジュール、タスクを簡潔にJSON形式で提案してください：

        Subject: {subject}
        Content: {content}

        フォーマット：
        {{
            "Opportunities": [
                "送信者名:機会の説明"
            ],
            "Schedules": [
                {{
                    "Description": "送信者名:予定の説明",
                    "Start Time": "YYYY-MM-DD HH:MM",
                    "End Time": "YYYY-MM-DD HH:MM"
                }}
            ],
            "Tasks": [
                {{
                    "Description": "送信者名:タスクの説明",
                    "Due Date": "YYYY-MM-DD"
                }}
            ]
        }}
        """

        message = client.messages.create(
            model="claude-3-haiku-20240307",
            max_tokens=4000,
            messages=[{"role": "user", "content": prompt}]
        )

        if message and message.content:
            return message.content[0].text
        return '<p>AI分析の結果を取得できませんでした。</p>'

    except Exception as e:
        return handle_ai_error("analyze_email", e)

def analyze_tasks(tasks):
    """Analyze tasks using Claude AI"""
    try:
        user_settings = UserSettings.query.filter_by(user_id=current_user.id).first()
        if not user_settings or not user_settings.claude_api_key:
            return '<p class="error-message">AI分析を実行するにはAPIキーの設定が必要です。</p>'
            
        client = Anthropic(api_key=user_settings.claude_api_key)

        task_data = "\n".join([
            f"- タイトル: {task.title}, 期限: {task.due_date}, ステータス: {task.status}"
            for task in tasks
        ])

        if not tasks:
            return '<p>分析対象のタスクがありません。</p>'

        prompt = f"""以下のタスクデータを分析してください:\n{task_data}\n
        以下の項目について簡潔に分析してください:
        1. タスクの優先度と進捗状況
        2. リソース配分の提案
        3. 期限管理の改善点
        4. 効率化のための提案
        回答は日本語でお願いします。HTMLの段落タグ（<p>）を使用してフォーマットしてください。"""

        message = client.messages.create(
            model="claude-3-haiku-20240307",
            max_tokens=4000,
            messages=[{"role": "user", "content": prompt}]
        )

        if message and message.content:
            content = message.content[0].text
            if not content.startswith('<p>'):
                content = '<p>' + content.replace('\n\n', '</p><p>') + '</p>'
            return content
        return '<p>AI分析の結果を取得できませんでした。</p>'

    except Exception as e:
        return handle_ai_error("analyze_tasks", e)

def analyze_opportunities(opportunities):
    """Analyze opportunities using Claude AI"""
    try:
        user_settings = UserSettings.query.filter_by(user_id=current_user.id).first()
        if not user_settings or not user_settings.claude_api_key:
            return '<p class="error-message">AI分析を実行するにはAPIキーの設定が必要です。</p>'
            
        client = Anthropic(api_key=user_settings.claude_api_key)

        opp_data = "\n".join([
            f"- 名前: {opp.name}, ステージ: {opp.stage}, 金額: {opp.amount}, 完了予定: {opp.close_date}"
            for opp in opportunities
        ])

        if not opportunities:
            return '<p>分析対象の商談がありません。</p>'

        prompt = f"""以下の商談データを分析してください:\n{opp_data}\n
        以下の項目について簡潔に分析してください:
        1. 総パイプライン価値と分布
        2. ステージごとの進捗状況
        3. 重点的に取り組むべき商談
        4. 次のステップへの提案
        回答は日本語でお願いします。HTMLの段落タグ（<p>）を使用してフォーマットしてください。"""

        message = client.messages.create(
            model="claude-3-haiku-20240307",
            max_tokens=4000,
            messages=[{"role": "user", "content": prompt}]
        )

        if message and message.content:
            content = message.content[0].text
            if not content.startswith('<p>'):
                content = '<p>' + content.replace('\n\n', '</p><p>') + '</p>'
            return content
        return '<p>AI分析の結果を取得できませんでした。</p>'

    except Exception as e:
        return handle_ai_error("analyze_opportunities", e)

def analyze_schedules(schedules):
    """Analyze schedules using Claude AI"""
    try:
        user_settings = UserSettings.query.filter_by(user_id=current_user.id).first()
        if not user_settings or not user_settings.claude_api_key:
            return '<p class="error-message">AI分析を実行するにはAPIキーの設定が必要です。</p>'
            
        client = Anthropic(api_key=user_settings.claude_api_key)

        schedule_data = "\n".join([
            f"- タイトル: {sch.title}, 開始: {sch.start_time}, 終了: {sch.end_time}"
            for sch in schedules
        ])

        if not schedules:
            return '<p>分析対象のスケジュールがありません。</p>'

        prompt = f"""以下のスケジュールデータを分析してください:\n{schedule_data}\n
        以下の項目について簡潔に分析してください:
        1. スケジュールの密度と時間配分
        2. 重要な予定の特定
        3. スケジュール管理の効率化
        4. バランス改善のための提案
        回答は日本語でお願いします。HTMLの段落タグ（<p>）を使用してフォーマットしてください。"""

        message = client.messages.create(
            model="claude-3-haiku-20240307",
            max_tokens=4000,
            messages=[{"role": "user", "content": prompt}]
        )

        if message and message.content:
            content = message.content[0].text
            if not content.startswith('<p>'):
                content = '<p>' + content.replace('\n\n', '</p><p>') + '</p>'
            return content
        return '<p>AI分析の結果を取得できませんでした。</p>'

    except Exception as e:
        return handle_ai_error("analyze_schedules", e)
